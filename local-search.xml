<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java</title>
    <link href="/2025/02/26/java/"/>
    <url>/2025/02/26/java/</url>
    
    <content type="html"><![CDATA[<h2 id="java语言学习"><a href="#java语言学习" class="headerlink" title="java语言学习"></a>java语言学习</h2><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>由字母、数学、<code>_</code>（下划线）、**<code>$</code>**组成，数字不可以开头。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>菜谱</title>
    <link href="/2025/02/15/%E8%8F%9C%E8%B0%B1/"/>
    <url>/2025/02/15/%E8%8F%9C%E8%B0%B1/</url>
    
    <content type="html"><![CDATA[<h1 id="菜谱"><a href="#菜谱" class="headerlink" title="菜谱"></a>菜谱</h1><p>（记录一些做菜过程）</p><h2 id="番茄炒蛋"><a href="#番茄炒蛋" class="headerlink" title="番茄炒蛋"></a>番茄炒蛋</h2><p><small>2025.02.14</small></p><ol><li>食材准备：<ul><li>两个番茄（拳头大小的话要3个），适量鸡蛋（4个）</li><li><del>三瓣大蒜</del></li></ul></li><li><del>大蒜切末。</del></li><li>打蛋，蛋液里加盐。</li><li>番茄一个切成小块，另一个大块，分开放在盘子里备用。</li><li>热锅倒油，等油温上来以后，倒入蛋液。大火翻炒待凝固后捞出。</li><li>（没油了的话再加点）下<del>蒜末和</del>小块番茄，待炒出汁水后下大块番茄，继续翻炒2min。</li><li>将鸡蛋重新倒回锅，调味：一勺糖、<del>一勺酱油、一勺耗油</del>。</li><li>出锅。</li></ol><p>总结：不该放蒜和耗油，甜度不够。</p><h2 id="蚂蚁上树（猪肉炖粉条）"><a href="#蚂蚁上树（猪肉炖粉条）" class="headerlink" title="蚂蚁上树（猪肉炖粉条）"></a>蚂蚁上树（猪肉炖粉条）</h2><p><small>2025.02.14</small></p><ol><li>食材准备：红薯粉条、猪肉肉末（500g取三分之一）、大葱、蒜叶、小米辣、姜蒜。</li><li>粉条提前用开水泡软，太长的话需要剪短。后捞出，控干水分。</li><li>10g生姜、三瓣大蒜剁成末；中指长度左右大葱切成末；2~3根小米椒切段，放一起备用。</li><li>蒜叶切成末，备用。</li><li>热锅倒油，下葱姜蒜、肉末，并加入1~2勺豆瓣酱。翻炒肉末，多压压 好让肉末散开来。</li><li>炒出红油后，下粉条，翻炒几下后开始调味：<ul><li>生抽2勺</li><li>老抽半勺~1勺</li><li>盐1勺</li><li>耗油1勺</li><li>糖 看情况加</li><li><strong>水 适量，必加</strong>！！不然太干，粉条吸水厉害。</li></ul></li><li>最后撒上蒜叶，可以小火再焖一会，没水加水。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>android-re</title>
    <link href="/2025/02/11/android-re/"/>
    <url>/2025/02/11/android-re/</url>
    
    <content type="html"><![CDATA[<h1 id="Android逆向"><a href="#Android逆向" class="headerlink" title="Android逆向"></a>Android逆向</h1><h2 id="apk文件结构"><a href="#apk文件结构" class="headerlink" title="apk文件结构"></a>apk文件结构</h2><table><thead><tr><th>文件</th><th>解释</th></tr></thead><tbody><tr><td>assets目录</td><td>存放apk的<strong>静态资源文件</strong>，如视频、音频、图片等。</td></tr><tr><td>lib&#x2F;目录</td><td><code>arm64-v8a</code>只用于64位的Android设备；<code>armeabi-v7a</code>基本通用所有Android设备；<code>x86</code>常见用于安卓模拟器，其目录下的<code>.so</code>文件是c&#x2F;c++编译的动态链接库。</td></tr><tr><td>META-INF目录</td><td>保存应用的<strong>签名信息</strong>，相当于apk的身份证。用于验证apk的完整性，即：文件是否被修改。</td></tr><tr><td>res目录</td><td>存放<strong>资源文件</strong>，包括图片、字符串等等。apk的脸蛋由layout文件设计。</td></tr><tr><td><code>AndroidManifest.xml</code></td><td>apk的应用清单信息，描述了应用的名字，版本，权限，引用的库等等信息。相当于<strong>元数据</strong>（metadata）。</td></tr><tr><td><code>classes.dex</code></td><td><strong>apk运行的主要逻辑</strong>。这是java源码编译后生成的java字节码文件。</td></tr><tr><td><code>resources.arsc</code></td><td>编译后的<strong>二进制资源文件</strong>。它是一个映射表，映射着资源和id，通过id找对应的资源。</td></tr></tbody></table><h2 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a><code>AndroidManifest.xml</code></h2><p>整个应用程序的信息描述文件，定义了应用程序中包含的Activity、Service、Content Provider和BroadcastReceiver组件信息。每个应用程序根目录下包含一个AndroidManifest.xml文件，且<strong>文件名不能修改</strong>。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>versionCode</code></td><td>版本号，主要用来更新，例如：<code>12</code></td></tr><tr><td><code>versionName</code></td><td>版本名，给用户看的，例如：<code>1.2</code></td></tr><tr><td><code>package</code></td><td>包名，例如：<code>com.zj.52pj.demo</code></td></tr><tr><td><code>uses-permission android:name=&quot;&quot;</code></td><td>应用权限，例如：<code>android.permission.INTERNET</code>代表网络权限</td></tr><tr><td><code>android:label=&quot;@string/app_name&quot;</code></td><td>应用名称</td></tr><tr><td><code>android:icon=&quot;@mipmap/ic_launcher&quot;</code></td><td>应用图标路径</td></tr><tr><td><code>android:debuggable=&quot;true&quot;</code></td><td>应用是否开启debug权限</td></tr></tbody></table><h2 id="应用双开"><a href="#应用双开" class="headerlink" title="应用双开"></a>应用双开</h2><p>即一个apk安装两遍，成为两个相同应用程序。</p><h2 id="应用汉化"><a href="#应用汉化" class="headerlink" title="应用汉化"></a>应用汉化</h2><h2 id="Dalvik、ART"><a href="#Dalvik、ART" class="headerlink" title="Dalvik、ART"></a>Dalvik、ART</h2><ul><li>Dalvik是Google专门为Android设计的一个虚拟机，有其专属的文件格式<code>.dex</code>（Dalvik executable）</li><li>Art（Android Runtime）相当于Dalvik的升级版，本质与Dalvik无异。</li></ul><h2 id="Smali"><a href="#Smali" class="headerlink" title="Smali"></a>Smali</h2><p>Smali是Dalvik虚拟机使用的一种汇编语言，通过对Android应用的反编译得来（主要是反编译.dex文件）。常用于安卓应用的逆向工程、分析和修改。</p><p>–&gt;<a href="https://ctf-wiki.org/android/basic_operating_mechanism/java_layer/smali/smali">Smali语法</a>&lt;–</p><p>修改Smali代码逻辑可实现应用破解，例如跳过大会员检测。<strong>理解成C#中的IL代码</strong>，修改IL代码也能达到变更应用逻辑的效果，只不过修改方式不同：</p><ul><li>IL：C#中需要用到Harmony类库，编写修改IL代码的patch（本质上是c#代码），然后实现<strong>运行时修改</strong>（动态）。</li><li>Smali：反汇编apk，编辑根目录下<code>classes.dex</code>核心逻辑文件，再保存重新签名、覆盖安装应用，是<strong>编译时修改</strong>（静态）。</li></ul><h2 id="安卓四大组件"><a href="#安卓四大组件" class="headerlink" title="安卓四大组件"></a>安卓四大组件</h2><table><thead><tr><th>组件</th><th>描述</th></tr></thead><tbody><tr><td>Activity（活动）</td><td>每个Activity都表示一个界面。如MainActivity主界面。一个安卓应用必须通过Activity来运行和启动，Activity的生命周期交给系统管理。</td></tr><tr><td>Service（服务）</td><td>在后台执行<strong>长时间操作</strong>且<strong>没有用户界面</strong>的组件。如：后台播放音乐、下载文件等。</td></tr><tr><td>Broadcast Receiver（广播接收器）</td><td>用于接收广播，并做出反应 的组件。常见的系统广播有：通知时区的改变、电量低、语言改变等。</td></tr><tr><td>Content Provider</td><td>接口。</td></tr></tbody></table><h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p><img src="/android-re/activity-lifecycle.png" alt="img"></p><table><thead><tr><th align="left">函数名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onCreate()</td><td align="left">一个Activity启动后第一个被调用的函数，常用来在此方法中进行Activity的一些初始化操作。例如创建View，绑定数据，注册监听，加载参数等。</td></tr><tr><td align="left">onStart()</td><td align="left">当Activity显示在屏幕上时，此方法被调用但此时还无法进行与用户的交互操作。</td></tr><tr><td align="left">onResume()</td><td align="left">这个方法在onStart()之后调用，也就是在Activity准备好与用户进行交互的时候调用，此时的Activity一定位于Activity栈顶，处于运行状态。</td></tr><tr><td align="left">onPause()</td><td align="left">这个方法是在系统准备去启动或者恢复另外一个Activity的时候调用，通常在这个方法中执行一些释放资源的方法，以及保存一些关键数据。</td></tr><tr><td align="left">onStop()</td><td align="left">这个方法是在Activity完全不可见的时候调用的。</td></tr><tr><td align="left">onDestroy()</td><td align="left">这个方法在Activity销毁之前调用，之后Activity的状态为销毁状态。</td></tr><tr><td align="left">onRestart()</td><td align="left">当Activity从停止stop状态恢进入start状态时调用状态。</td></tr></tbody></table><h2 id="跳过广告-弹窗的方法"><a href="#跳过广告-弹窗的方法" class="headerlink" title="跳过广告&#x2F;弹窗的方法"></a>跳过广告&#x2F;弹窗的方法</h2><p>广告分为：</p><ul><li>启动广告（开屏广告）</li><li>弹窗&#x2F;更新广告</li><li>横幅广告</li></ul><p>开屏广告的流程：启动activity -&gt; 广告activity -&gt; 主页activity</p><h3 id="Q：如何找到广告activity的类名？"><a href="#Q：如何找到广告activity的类名？" class="headerlink" title="Q：如何找到广告activity的类名？"></a>Q：如何找到广告activity的类名？</h3><p>A：mt管理器 - 左上角三横杠 - Activity记录，打开服务，再进入你的应用，会自动捕捉所有显示过的activity，包括广告的。</p><h3 id="方法1-修改加载时间"><a href="#方法1-修改加载时间" class="headerlink" title="方法1 - 修改加载时间"></a>方法1 - 修改加载时间</h3><p>即，通过修改广告activity本身的代码（如将延迟时间设为零）来跳过广告。下例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Decompiled by Jadx (from NP Manager)</span><br><span class="hljs-comment">//</span><br><span class="hljs-keyword">package</span> com.zj.wuaipojie.ui;<br><br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.content.Intent;<br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.os.Handler;<br><span class="hljs-keyword">import</span> android.os.Message;<br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><span class="hljs-keyword">import</span> com.zj.wuaipojie.ui.AdActivity$.ExternalSyntheticLambda0;<br><span class="hljs-keyword">import</span> kotlin.Metadata;<br><br><span class="hljs-meta">@Metadata(d1 = &#123;&quot;\u0000(\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0005\u0018\u0000 \u00102\u00020\u0001:\u0001\u0010B\u0005¢\u0006\u0002\u0010\u0002J\b\u0010\u0007\u001a\u00020\bH\u0002J\b\u0010\t\u001a\u00020\bH\u0002J\u0012\u0010\n\u001a\u00020\b2\b\u0010\u000b\u001a\u0004\u0018\u00010\fH\u0014J\b\u0010\r\u001a\u00020\bH\u0014J\b\u0010\u000e\u001a\u00020\bH\u0014J\b\u0010\u000f\u001a\u00020\bH\u0014R\u000e\u0010\u0003\u001a\u00020\u0004X\u000e¢\u0006\u0002\n\u0000R\u000e\u0010\u0005\u001a\u00020\u0006X\u0004¢\u0006\u0002\n\u0000¨\u0006\u0011&quot;&#125;, d2 = &#123;&quot;Lcom/zj/wuaipojie/ui/AdActivity;&quot;, &quot;Landroidx/appcompat/app/AppCompatActivity;&quot;, &quot;()V&quot;, &quot;hasPaused&quot;, &quot;&quot;, &quot;timeoutHandler&quot;, &quot;Landroid/os/Handler;&quot;, &quot;jump&quot;, &quot;&quot;, &quot;loadAd&quot;, &quot;onCreate&quot;, &quot;savedInstanceState&quot;, &quot;Landroid/os/Bundle;&quot;, &quot;onDestroy&quot;, &quot;onRestart&quot;, &quot;onStop&quot;, &quot;Companion&quot;, &quot;app_release&quot;&#125;, k = 1, mv = &#123;1, 7, 1&#125;, xi = 48)</span><br><span class="hljs-meta">/* compiled from: AdActivity.kt */</span><br><span class="hljs-meta">public final class AdActivity extends AppCompatActivity &#123;</span><br><span class="hljs-meta">    private static final int AD_TIMEOUT = 3000;</span><br><span class="hljs-meta">    public static final Companion Companion = new Companion(null);</span><br><span class="hljs-meta">    private static final int MSG_AD_TIMEOUT = 1001;</span><br><span class="hljs-meta">    private boolean hasPaused;</span><br><span class="hljs-meta">    private final Handler timeoutHandler = new Handler(new ExternalSyntheticLambda0(this));</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    private final void jump() &#123;</span><br><span class="hljs-meta">        if (!this.hasPaused) &#123;</span><br><span class="hljs-meta">            this.hasPaused = true;</span><br><span class="hljs-meta">            startActivity(new Intent((Context) this, ChallengeThird.class));</span><br><span class="hljs-meta">            finish();</span><br><span class="hljs-meta">        &#125;</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    protected void onCreate(Bundle bundle) &#123;</span><br><span class="hljs-meta">        super.onCreate(bundle);</span><br><span class="hljs-meta">        setContentView(2131427362);</span><br><span class="hljs-meta">        loadAd();</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    protected void onRestart() &#123;</span><br><span class="hljs-meta">        super.onRestart();</span><br><span class="hljs-meta">        this.hasPaused = false;</span><br><span class="hljs-meta">        jump();</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    protected void onStop() &#123;</span><br><span class="hljs-meta">        this.timeoutHandler.removeMessages(MSG_AD_TIMEOUT);</span><br><span class="hljs-meta">        this.hasPaused = true;</span><br><span class="hljs-meta">        super.onStop();</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    private final void loadAd() &#123;</span><br><span class="hljs-meta">        this.timeoutHandler.removeMessages(MSG_AD_TIMEOUT);</span><br><span class="hljs-meta">        this.timeoutHandler.sendEmptyMessageDelayed(MSG_AD_TIMEOUT, 3000);</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    /* renamed from: timeoutHandler$lambda-0 */</span><br><span class="hljs-meta">    private static final boolean m0timeoutHandler$lambda-0(AdActivity adActivity, Message message) &#123;</span><br><span class="hljs-meta">        if (adActivity.hasWindowFocus()) &#123;</span><br><span class="hljs-meta">            adActivity.jump();</span><br><span class="hljs-meta">        &#125;</span><br><span class="hljs-meta">        return false;</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    protected void onDestroy() &#123;</span><br><span class="hljs-meta">        super.onDestroy();</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta">&#125;</span><br></code></pre></td></tr></table></figure><ol><li><strong>广告超时跳转 (<code>jump()</code> 方法)</strong></li></ol><ul><li><code>jump()</code> 方法被用来跳过广告，并且只会在广告页面暂停后跳转。</li><li><code>this.hasPaused</code> 用来检查广告是否已经暂停。如果还没有暂停（即广告未跳过），它会跳转到 <code>ChallengeThird</code> 活动并关闭当前的 <code>AdActivity</code>。</li></ul><ol start="2"><li><strong><code>loadAd()</code> 方法</strong></li></ol><ul><li>该方法用来启动广告的加载逻辑，并且设置了一个超时定时器（3 秒）。</li><li><code>this.timeoutHandler.sendEmptyMessageDelayed(MSG_AD_TIMEOUT, 3000)</code> 会在 3 秒后发送一个消息 (<code>MSG_AD_TIMEOUT</code>) 来触发广告跳过。</li></ul><ol start="3"><li><strong>Handler 处理超时 (<code>timeoutHandler</code>)</strong></li></ol><ul><li><code>timeoutHandler</code> 是一个 <code>Handler</code>，它接收到 <code>MSG_AD_TIMEOUT</code> 消息时，会调用 <code>jump()</code> 方法来跳过广告。</li><li><code>m0timeoutHandler$lambda-0()</code> 这个方法会在消息触发时检查当前窗口是否有焦点，如果有焦点，就调用 <code>jump()</code> 跳过广告。</li></ul><ol start="4"><li><strong>生命周期控制</strong></li></ol><ul><li><strong><code>onCreate()</code></strong>：页面创建时会调用 <code>loadAd()</code> 来加载广告并设置 3 秒超时。</li><li><strong><code>onRestart()</code></strong>：当页面重启时，<code>hasPaused</code> 被重置为 <code>false</code>，并立刻调用 <code>jump()</code> 跳过广告。</li><li><strong><code>onStop()</code></strong>：当页面停止时，会移除超时消息并标记 <code>hasPaused</code> 为 <code>true</code>。</li><li><strong><code>onDestroy()</code></strong>：页面销毁时没有额外逻辑，调用父类的 <code>onDestroy()</code>。</li></ul><p>具体方法：</p><ol><li><strong>修改超时消息的延时</strong>：可以减少 <code>MSG_AD_TIMEOUT</code> 的延时，快速跳过广告。</li></ol><p>修改这一行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.timeoutHandler.sendEmptyMessageDelayed(MSG_AD_TIMEOUT, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><p>将3000改成50，但不可改成零。因为若没有延时，消息立即被处理，那么<code>hasPaused</code>可能还是<code>true</code>的状态，无法进行<code>jump()</code>的逻辑。</p><p>（通过Smali代码修改）</p><ol start="2"><li><p><strong>直接调用跳转</strong>：可以通过反射或修改代码，直接在 <code>onCreate()</code> 或 <code>onRestart()</code> 中调用 <code>jump()</code> 来跳过广告。</p><p>没试过。。</p></li></ol><h3 id="方法2-Activity切换定位，修改Intent的Activity类名"><a href="#方法2-Activity切换定位，修改Intent的Activity类名" class="headerlink" title="方法2 - Activity切换定位，修改Intent的Activity类名"></a>方法2 - Activity切换定位，修改Intent的Activity类名</h3><h3 id="Q：如何找到相关类在Smali代码中的引用？"><a href="#Q：如何找到相关类在Smali代码中的引用？" class="headerlink" title="Q：如何找到相关类在Smali代码中的引用？"></a>Q：如何找到相关类在Smali代码中的引用？</h3><p>A：1. mt管理器（或np）打开<code>classes.dex</code> </p><ol start="2"><li>搜索原始类名，如<code>com.zj.wuaipojie.ui.AdActivity</code>，搜索类型为<code>类名</code> </li><li>找到正确的类后，长摁 - 复制 - 选择最后一项，如<code>Lcom/zj/wuaipojie/ui/AdActivity;</code> 这是类在Smali中引用时的名字。</li><li>将复制的新名字填入搜索框，搜索类型为<code>代码</code></li></ol><p>下例Intent：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (position) &#123;  <br>           <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <br>               <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>               intent.setClass(it.getContext(), ChallengeFirst.class);  <br>               it.getContext().startActivity(intent);  <br>               <span class="hljs-keyword">return</span>;  <br>           <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <br>               <span class="hljs-type">Intent</span> <span class="hljs-variable">intent2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>               intent2.setClass(it.getContext(), ChallengeSecond.class);  <br>               it.getContext().startActivity(intent2);  <br>               <span class="hljs-keyword">return</span>;  <br>           <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:  <br>               <span class="hljs-type">Intent</span> <span class="hljs-variable">intent3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <span class="hljs-comment">//new一个Intent，</span><br>               intent3.setClass(it.getContext(), AdActivity.class);  <span class="hljs-comment">//传入要切换的Acitivity的类名</span><br>               it.getContext().startActivity(intent3);  <span class="hljs-comment">//启动对应的Activity</span><br>               <span class="hljs-keyword">return</span>;  <br>           <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:  <br>               <span class="hljs-type">Intent</span> <span class="hljs-variable">intent4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();  <br>               intent4.setClass(it.getContext(), ChallengeFourth.class);  <br>               it.getContext().startActivity(intent4);  <br>               <span class="hljs-keyword">return</span>; <br>           <span class="hljs-keyword">default</span>:  <br>               <span class="hljs-keyword">return</span>;  <br>       &#125;<br></code></pre></td></tr></table></figure><p>将</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">intent3.setClass(it.getContext(), AdActivity.class);<br></code></pre></td></tr></table></figure><p>中的<code>AdActivity</code>改成页面Activity即可实现跳过广告。</p><h3 id="跳过弹窗法一-修改xml中的versionCode"><a href="#跳过弹窗法一-修改xml中的versionCode" class="headerlink" title="跳过弹窗法一 - 修改xml中的versionCode"></a>跳过弹窗法一 - 修改xml中的versionCode</h3><p>考虑到弹窗有一部分是<strong>更新提示</strong>，可以改版本号跳过更新检测。即，修改<code>AndroidManifest.xml</code>中<code>versionCode</code>和<code>versionName</code>。</p><p>（适用于<strong>已知最新版本号</strong>的前提）</p><h3 id="跳过弹窗法二-Hook弹窗（算法助手）"><a href="#跳过弹窗法二-Hook弹窗（算法助手）" class="headerlink" title="跳过弹窗法二 - Hook弹窗（算法助手）"></a>跳过弹窗法二 - Hook弹窗（算法助手）</h3><p>（针对那些劫持返回键的弹窗）</p><p>算法助手 - 开启对应应用的<code>应用总开关</code>和<code>UI</code>下的<code>弹窗定位（返回键可取消）</code>，再点击右上角的小三角启动应用。被劫持的返回键又能用了！</p><p>（屏蔽关键词弹窗）</p><p>算法助手 - 开启对应应用的<code>应用总开关</code> 和 <code>UI</code>下的<code>屏蔽关键词弹窗</code>，输入弹窗中模糊&#x2F;精确的关键词，如”广告”，即可一键屏蔽所有使用该关键词的广告！</p><h3 id="跳过弹窗法三-修改dex代码"><a href="#跳过弹窗法三-修改dex代码" class="headerlink" title="跳过弹窗法三 - 修改dex代码"></a>跳过弹窗法三 - 修改dex代码</h3><p>step1：定位弹窗位于哪个方法中。可利用 <code>算法助手 - 日志 - 某个Dialog弹窗 - 调用堆栈</code> 查看。</p><p>step2：<strong>一般弹窗需要调用 <code>xxxDialog.show()</code>方法才能显示</strong>。因此把Smali中调用<code>.show()</code>方法的语句注释掉即可。</p><h2 id="跳过横幅广告的方法"><a href="#跳过横幅广告的方法" class="headerlink" title="跳过横幅广告的方法"></a>跳过横幅广告的方法</h2><p>step1: <a href="https://github.com/TimeShining/Android-Dev-Tools">开发助手</a> - 布局查看（需启用无障碍权限）- 切到横幅应用 - 点击悬浮窗上的放大镜图标 - 定位横幅广告 - 复制<code>View Id(Hex)</code></p><p>step2: mt管理器 - 进入目标应用apk - <code>XML搜索</code> - 搜索刚刚复制的<code>View Id</code>（十六进制，搜索类型 <code>资源ID</code>）</p><p>下例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@7F0801CA&quot;</span>           &lt;!<span class="hljs-attr">--</span> <span class="hljs-attr">十六进制ViewId</span> <span class="hljs-attr">--</span>&gt;</span><br>                    android:background=&quot;@7F0D0017&quot;<br>                    android:layout_width=&quot;-2&quot;        <span class="hljs-comment">&lt;!-- 弹窗宽度，-2代表 wrap_content 自适应--&gt;</span><br>                    android:layout_height=&quot;150dp&quot;    <span class="hljs-comment">&lt;!-- 弹窗高度 --&gt;</span><br>                    android:layout_marginTop=&quot;100dp&quot; /&gt;<br></code></pre></td></tr></table></figure><p>要跳过横幅，只需把宽高全调成<code>0dp</code>即可。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python</title>
    <link href="/2025/02/09/python/"/>
    <url>/2025/02/09/python/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/08/hello-world/"/>
    <url>/2025/02/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>misc</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
